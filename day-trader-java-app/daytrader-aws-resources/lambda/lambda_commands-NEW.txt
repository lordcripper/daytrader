https://awscli.amazonaws.com/v2/documentation/api/latest/reference/lambda/index.html

#====================================================================================================
# From : 
# https://medium.com/@jacobsteeves/aws-lambda-from-the-command-line-7efab7f3ebd9
#====================================================================================================

#====================================================================================================
# Create a function in python (check file sspoc_daytrader_kubernetes_deploy.py )

#Zip it
zip sspoc_daytrader_kubernetes_deploy.zip sspoc_daytrader_kubernetes_deploy.py
#####====================================================================================================
##### If required, create new user for Lambda ( create_new_lambda_user.txt )
#####====================================================================================================
####
##### Create our policy granting all the lambda functionality ( check sspoc_lambda_policy.json )
####
#####====================================================================================================
##### Grant this policy to our sspoc_lambda_user
##### Is this required for shibu_admin user?
####
#####aws iam put-user-policy --profile shibu_admin --user-name shibu_admin --policy-name lambda_all --policy-document file://sspoc_lambda_policy.json
####
#####====================================================================================================

#create a role. 
#The role specifies what actions the function instance is capable of ( check assume_role.json )
#--------------------------------------------------------
aws iam create-role --profile shibu_admin --role-name sspoc_daytrader_lambda_role --assume-role-policy-document file://assume_role.json


# Note down the "ARN" e.g:
"Arn": "arn:aws:iam::560773393352:role/sspoc_daytrader_lambda_role"

#====================================================================================================
#to enable logs in Cloud Watch
aws iam --profile shibu_admin attach-role-policy --role-name sspoc_daytrader_lambda_role --policy-arn "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
#aws iam --profile shibu_admin attach-role-policy --role-name sspoc_daytrader_lambda_role --policy-arn "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda"

aws iam --profile shibu_admin attach-role-policy --role-name sspoc_daytrader_lambda_role --policy-arn "arn:aws:iam::aws:policy/AWSCodePipelineFullAccess"
aws iam --profile shibu_admin attach-role-policy --role-name sspoc_daytrader_lambda_role --policy-arn "arn:aws:iam::aws:policy/CloudWatchFullAccess"
aws iam --profile shibu_admin attach-role-policy --role-name sspoc_daytrader_lambda_role --policy-arn "arn:aws:iam::aws:policy/AWSLambdaFullAccess"
aws iam --profile shibu_admin attach-role-policy --role-name sspoc_daytrader_lambda_role --policy-arn "arn:aws:iam::aws:policy/AmazonS3FullAccess"
aws iam --profile shibu_admin attach-role-policy --role-name sspoc_daytrader_lambda_role --policy-arn "arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess"
aws iam --profile shibu_admin attach-role-policy --role-name sspoc_daytrader_lambda_role --policy-arn "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

#assign EKS related policy to the role -- NEW
aws iam --profile shibu_admin put-role-policy --role-name sspoc_daytrader_lambda_role --policy-name daytrader_eks_policy_for_lambda --policy-document file://sspoc_lambda_eks_policy.json

#====================================================================================================
#delete lambda function , if already exists
#aws lambda delete-function --profile shibu_admin --function-name sspoc_daytrader_kubernetes_deploy 

#create lambda function 
aws lambda create-function --profile shibu_admin --function-name sspoc_daytrader_kubernetes_deploy --zip-file fileb://sspoc_daytrader_kubernetes_deploy.zip --role "arn:aws:iam::560773393352:role/sspoc_daytrader_lambda_role" --handler sspoc_daytrader_kubernetes_deploy.sspoc_daytrader_kubernetes_deploy --runtime python3.8 --timeout 60

#update lambda function (if you have modified just the python code)
aws lambda update-function-code --profile shibu_admin --function-name sspoc_daytrader_kubernetes_deploy --zip-file fileb://sspoc_daytrader_kubernetes_deploy.zip
#====================================================================================================

#Create layers in either of below two ways
#1) create with zip file as below
aws lambda publish-layer-version --profile shibu_admin --layer-name daytrader_kubectl_layer           --zip-file fileb://kubectl_layer.zip
aws lambda publish-layer-version --profile shibu_admin --layer-name daytrader_awscli_layerv6          --zip-file fileb://awscli-lambda-layerv6.zip
aws lambda publish-layer-version --profile shibu_admin --layer-name daytrader_eksctl_layer            --zip-file fileb://eksctl_layer.zip
aws lambda publish-layer-version --profile shibu_admin --layer-name daytrader_iamauthenticator_layer  --zip-file fileb://aws-iam-authenticator-layer.zip
aws lambda publish-layer-version --profile shibu_admin --layer-name daytrader_helm_layer              --zip-file fileb://helm_layer.zip

#2) Upload to S3 bucket and then create as below
aws lambda publish-layer-version --profile shibu_admin --layer-name daytrader_kubectl_layer           --content "S3Bucket=ss-poc-shibu,S3Key=kubectl_layer.zip"
aws lambda publish-layer-version --profile shibu_admin --layer-name daytrader_awscli_layerv6          --content "S3Bucket=ss-poc-shibu,S3Key=awscli_layer.zip"
aws lambda publish-layer-version --profile shibu_admin --layer-name daytrader_eksctl_layer            --content "S3Bucket=ss-poc-shibu,S3Key=eksctl_layer.zip"
aws lambda publish-layer-version --profile shibu_admin --layer-name daytrader_iamauthenticator_layer  --content "S3Bucket=ss-poc-shibu,S3Key=aws-iam-authenticator-layer.zip"

Note down Layer ARN
arn:aws:lambda:us-east-2:560773393352:layer:daytrader_kubectl_layer:1
arn:aws:lambda:us-east-2:560773393352:layer:daytrader_awscli_layerv6:1
arn:aws:lambda:us-east-2:560773393352:layer:daytrader_eksctl_layer:1
arn:aws:lambda:us-east-2:560773393352:layer:daytrader_iamauthenticator_layer:1
arn:aws:lambda:us-east-2:560773393352:layer:daytrader_helm_layer:1

#====================================================================================================
Set PATH values in envronment of lambda
#====================================================================================================

#Add layers to lambda function
#Note:- all layers has to be added in a single command.
aws lambda update-function-configuration --profile shibu_admin --function-name sspoc_daytrader_kubernetes_deploy --layers arn:aws:lambda:us-east-2:560773393352:layer:daytrader_kubectl_layer:1 arn:aws:lambda:us-east-2:560773393352:layer:daytrader_awscli_layerv6:1 arn:aws:lambda:us-east-2:560773393352:layer:daytrader_iamauthenticator_layer:1 arn:aws:lambda:us-east-2:560773393352:layer:daytrader_eksctl_layer:1  arn:aws:lambda:us-east-2:560773393352:layer:daytrader_helm_layer:1 
aws lambda update-function-configuration --profile shibu_admin --function-name sspoc_daytrader_kubernetes_deploy --layers arn:aws:lambda:us-east-2:560773393352:layer:daytrader_kubectl_layer:1 arn:aws:lambda:us-east-2:560773393352:layer:daytrader_awscli_layerv6:1 arn:aws:lambda:us-east-2:560773393352:layer:daytrader_helm_layer:1 

#====================================================================================================
#And now to invoke it

#Create a request.json file to input your request data
#Note: it is 'fileb' for binary file

aws lambda invoke --profile shibu_admin --invocation-type RequestResponse --function-name sspoc_daytrader_kubernetes_deploy --region us-east-2 --log-type Tail --payload fileb://request.json output.txt
cat output.txt && echo

#====================================================================================================
#get details of lambda function
#aws lambda --profile shibu_admin list-functions 

#====================================================================================================
#To access EKS from Lambda

Follow instructions from 
https://aws.amazon.com/premiumsupport/knowledge-center/eks-api-server-unauthorized-error/
Check pdf "Resolve Unauthorized Server Error when Connecting to Amazon EKS API Server.pdf"  


  
aws eks --profile shibu_admin update-kubeconfig --name ss-poc-cluster
aws eks --profile shibu_admin update-kubeconfig --name ss-poc-cluster --role-arn arn:aws:iam::560773393352:role/sspoc_daytrader_lambda_role

aws sts --profile shibu_admin get-caller-identity
kubectl edit configmap aws-auth -n kube-system   (Edit lines as per pdf)
#verify your edits are available...
kubectl edit configmap aws-auth -n kube-system

#====================================================================================================
kubectl get pods
kubectl get deployments
kubectl delete deployment account-depl
kubectl get deployments
#====================================================================================================
#if you are repeatedly modifying code and deploying
zip sspoc_daytrader_kubernetes_deploy.zip sspoc_daytrader_kubernetes_deploy.py
aws logs --profile shibu_admin delete-log-group --log-group-name /aws/lambda/sspoc_daytrader_kubernetes_deploy
aws lambda update-function-configuration --profile shibu_admin --function-name sspoc_daytrader_kubernetes_deploy --layers arn:aws:lambda:us-east-2:560773393352:layer:daytrader_kubectl_layer:1 arn:aws:lambda:us-east-2:560773393352:layer:daytrader_awscli_layerv6:1 
aws lambda update-function-configuration --profile shibu_admin --function-name sspoc_daytrader_kubernetes_deploy --timeout 300
aws lambda update-function-code --profile shibu_admin --function-name sspoc_daytrader_kubernetes_deploy --zip-file fileb://sspoc_daytrader_kubernetes_deploy.zip > out.txt
aws lambda invoke --profile shibu_admin --invocation-type RequestResponse --function-name sspoc_daytrader_kubernetes_deploy --region us-east-2 --log-type Tail --payload fileb://request.json output.txt


curl https://ohxzpxhmzh.execute-api.us-east-2.amazonaws.com/
